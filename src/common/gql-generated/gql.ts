/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    mutation AuthorizeDiscount($input: AuthorizeDiscountInput!) {\n        authorizeDiscount(input: $input) {\n            id\n            discountAuthorization {\n                __typename\n                ... on EstimateDiscountRequested {\n                    requestDate\n                }\n            }\n        }\n    }\n": types.AuthorizeDiscountDocument,
    "\n    mutation Login($input: loginInput!) {\n        login(input: $input) {\n            __typename\n            ... on AuthPayload {\n                viewer {\n                    id\n                    name\n                    login\n                    avatar {\n                        url\n                        initials\n                    }\n                    __typename\n                }\n                __typename\n            }\n            ... on InvalidLoginInfo {\n                message\n                __typename\n            }\n            ... on LockedUser {\n                message\n                __typename\n            }\n            ... on InactiveUser {\n                message\n                __typename\n            }\n        }\n    }\n": types.LoginDocument,
    "\n    fragment AuthPayloadFragment on AuthPayload {\n        viewer {\n            id\n            name\n            group {\n                id\n                locale\n                numberFormat\n                dateFormat\n                currency\n            }\n            __typename\n        }\n    }\n    query CheckAuth {\n        checkAuth {\n            ... on AuthPayload {\n                ...AuthPayloadFragment\n            }\n            __typename\n        }\n    }\n": types.AuthPayloadFragmentFragmentDoc,
    "\n    query MobileDashboard {\n        mobileDashboard {\n            # list of values for the chart, starting from 12 months ago until the current month\n            lastTwelveMonths\n            # value in $ and number of sales in the current month\n            monthsSalesTotal\n            monthsNumberOfSales\n            # value in $ and number of sales in the current year\n            yearsSalesTotal\n            yearsNumberOfSales\n            # value in $ and number of sales closing this week\n            activeEstimatesTotal\n            numberOfActiveEstimates\n            # value in $ and number of sales in the current year\n            approvalThisWeekTotal\n            numberOfApprovalThisWeek\n        }\n    }\n": types.MobileDashboardDocument,
    "\n    query ProjectDetails($id: Int!) {\n        project(id: $id) {\n            id\n            name\n            status\n            favoriteEstimate {\n                id\n                code\n                # subtotal = price - taxesPrice - installationService.price - deliveryService.price\n                discount\n                price\n                markup\n                taxesPrice\n                discountAuthorization {\n                    __typename\n                    # typename pode ser EstimateDiscountRequested, EstimateDiscountNotRequested ou EstimateDiscountAuthorized\n                    # por enquanto apenas EstimateDiscountRequested tem campos extras\n                    ... on EstimateDiscountRequested {\n                        requestDate\n                    }\n                }\n                installationService {\n                    id\n                    price\n                }\n                deliveryService {\n                    id\n                    price\n                }\n                discount\n                profitMargin\n                profitMarginPercentage\n                allItems {\n                    id\n                    name\n                    price\n                    discount\n                }\n            }\n            customer {\n                id\n                name\n            }\n            projectOwner {\n                id\n                name\n            }\n        }\n    }\n": types.ProjectDetailsDocument,
    "\n    query Projects($filters: ProjectsFilters!) {\n        projects(filters: $filters) {\n            projects {\n                id\n                name\n                favoriteEstimate {\n                    id\n                    price\n                    markup\n                    discount\n                    profitMarginPercentage\n                }\n                customer {\n                    id\n                    name\n                }\n            }\n            hasMore\n        }\n    }\n": types.ProjectsDocument,
    "\n    query SalesOrderDetails($id: Int!) {\n        project(id: $id) {\n            id\n            name\n            status\n            saleOrder {\n                id\n                code\n                estimate {\n                    id\n                    discount\n                    # subtotal = price - taxesPrice - installationService.price - deliveryService.price\n                    price\n                    markup\n                    taxesPrice\n                    installationService {\n                        id\n                        price\n                    }\n                    deliveryService {\n                        id\n                        price\n                    }\n                    discount\n                    profitMargin\n                    profitMarginPercentage\n                    allItems {\n                        id\n                        name\n                        price\n                        discount\n                    }\n                }\n            }\n            customer {\n                id\n                name\n            }\n            projectOwner {\n                id\n                name\n            }\n        }\n    }\n": types.SalesOrderDetailsDocument,
    "\n    query SalesOrders($filters: ProjectsFilters!) {\n        projects(filters: $filters) {\n            hasMore\n            projects {\n                id\n                name\n                saleOrder {\n                    id\n                    estimate {\n                        id\n                        price\n                        markup\n                        discount\n                        profitMarginPercentage\n                    }\n                }\n                customer {\n                    id\n                    name\n                }\n            }\n        }\n    }\n": types.SalesOrdersDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation AuthorizeDiscount($input: AuthorizeDiscountInput!) {\n        authorizeDiscount(input: $input) {\n            id\n            discountAuthorization {\n                __typename\n                ... on EstimateDiscountRequested {\n                    requestDate\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation AuthorizeDiscount($input: AuthorizeDiscountInput!) {\n        authorizeDiscount(input: $input) {\n            id\n            discountAuthorization {\n                __typename\n                ... on EstimateDiscountRequested {\n                    requestDate\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation Login($input: loginInput!) {\n        login(input: $input) {\n            __typename\n            ... on AuthPayload {\n                viewer {\n                    id\n                    name\n                    login\n                    avatar {\n                        url\n                        initials\n                    }\n                    __typename\n                }\n                __typename\n            }\n            ... on InvalidLoginInfo {\n                message\n                __typename\n            }\n            ... on LockedUser {\n                message\n                __typename\n            }\n            ... on InactiveUser {\n                message\n                __typename\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation Login($input: loginInput!) {\n        login(input: $input) {\n            __typename\n            ... on AuthPayload {\n                viewer {\n                    id\n                    name\n                    login\n                    avatar {\n                        url\n                        initials\n                    }\n                    __typename\n                }\n                __typename\n            }\n            ... on InvalidLoginInfo {\n                message\n                __typename\n            }\n            ... on LockedUser {\n                message\n                __typename\n            }\n            ... on InactiveUser {\n                message\n                __typename\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment AuthPayloadFragment on AuthPayload {\n        viewer {\n            id\n            name\n            group {\n                id\n                locale\n                numberFormat\n                dateFormat\n                currency\n            }\n            __typename\n        }\n    }\n    query CheckAuth {\n        checkAuth {\n            ... on AuthPayload {\n                ...AuthPayloadFragment\n            }\n            __typename\n        }\n    }\n"): (typeof documents)["\n    fragment AuthPayloadFragment on AuthPayload {\n        viewer {\n            id\n            name\n            group {\n                id\n                locale\n                numberFormat\n                dateFormat\n                currency\n            }\n            __typename\n        }\n    }\n    query CheckAuth {\n        checkAuth {\n            ... on AuthPayload {\n                ...AuthPayloadFragment\n            }\n            __typename\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query MobileDashboard {\n        mobileDashboard {\n            # list of values for the chart, starting from 12 months ago until the current month\n            lastTwelveMonths\n            # value in $ and number of sales in the current month\n            monthsSalesTotal\n            monthsNumberOfSales\n            # value in $ and number of sales in the current year\n            yearsSalesTotal\n            yearsNumberOfSales\n            # value in $ and number of sales closing this week\n            activeEstimatesTotal\n            numberOfActiveEstimates\n            # value in $ and number of sales in the current year\n            approvalThisWeekTotal\n            numberOfApprovalThisWeek\n        }\n    }\n"): (typeof documents)["\n    query MobileDashboard {\n        mobileDashboard {\n            # list of values for the chart, starting from 12 months ago until the current month\n            lastTwelveMonths\n            # value in $ and number of sales in the current month\n            monthsSalesTotal\n            monthsNumberOfSales\n            # value in $ and number of sales in the current year\n            yearsSalesTotal\n            yearsNumberOfSales\n            # value in $ and number of sales closing this week\n            activeEstimatesTotal\n            numberOfActiveEstimates\n            # value in $ and number of sales in the current year\n            approvalThisWeekTotal\n            numberOfApprovalThisWeek\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query ProjectDetails($id: Int!) {\n        project(id: $id) {\n            id\n            name\n            status\n            favoriteEstimate {\n                id\n                code\n                # subtotal = price - taxesPrice - installationService.price - deliveryService.price\n                discount\n                price\n                markup\n                taxesPrice\n                discountAuthorization {\n                    __typename\n                    # typename pode ser EstimateDiscountRequested, EstimateDiscountNotRequested ou EstimateDiscountAuthorized\n                    # por enquanto apenas EstimateDiscountRequested tem campos extras\n                    ... on EstimateDiscountRequested {\n                        requestDate\n                    }\n                }\n                installationService {\n                    id\n                    price\n                }\n                deliveryService {\n                    id\n                    price\n                }\n                discount\n                profitMargin\n                profitMarginPercentage\n                allItems {\n                    id\n                    name\n                    price\n                    discount\n                }\n            }\n            customer {\n                id\n                name\n            }\n            projectOwner {\n                id\n                name\n            }\n        }\n    }\n"): (typeof documents)["\n    query ProjectDetails($id: Int!) {\n        project(id: $id) {\n            id\n            name\n            status\n            favoriteEstimate {\n                id\n                code\n                # subtotal = price - taxesPrice - installationService.price - deliveryService.price\n                discount\n                price\n                markup\n                taxesPrice\n                discountAuthorization {\n                    __typename\n                    # typename pode ser EstimateDiscountRequested, EstimateDiscountNotRequested ou EstimateDiscountAuthorized\n                    # por enquanto apenas EstimateDiscountRequested tem campos extras\n                    ... on EstimateDiscountRequested {\n                        requestDate\n                    }\n                }\n                installationService {\n                    id\n                    price\n                }\n                deliveryService {\n                    id\n                    price\n                }\n                discount\n                profitMargin\n                profitMarginPercentage\n                allItems {\n                    id\n                    name\n                    price\n                    discount\n                }\n            }\n            customer {\n                id\n                name\n            }\n            projectOwner {\n                id\n                name\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query Projects($filters: ProjectsFilters!) {\n        projects(filters: $filters) {\n            projects {\n                id\n                name\n                favoriteEstimate {\n                    id\n                    price\n                    markup\n                    discount\n                    profitMarginPercentage\n                }\n                customer {\n                    id\n                    name\n                }\n            }\n            hasMore\n        }\n    }\n"): (typeof documents)["\n    query Projects($filters: ProjectsFilters!) {\n        projects(filters: $filters) {\n            projects {\n                id\n                name\n                favoriteEstimate {\n                    id\n                    price\n                    markup\n                    discount\n                    profitMarginPercentage\n                }\n                customer {\n                    id\n                    name\n                }\n            }\n            hasMore\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query SalesOrderDetails($id: Int!) {\n        project(id: $id) {\n            id\n            name\n            status\n            saleOrder {\n                id\n                code\n                estimate {\n                    id\n                    discount\n                    # subtotal = price - taxesPrice - installationService.price - deliveryService.price\n                    price\n                    markup\n                    taxesPrice\n                    installationService {\n                        id\n                        price\n                    }\n                    deliveryService {\n                        id\n                        price\n                    }\n                    discount\n                    profitMargin\n                    profitMarginPercentage\n                    allItems {\n                        id\n                        name\n                        price\n                        discount\n                    }\n                }\n            }\n            customer {\n                id\n                name\n            }\n            projectOwner {\n                id\n                name\n            }\n        }\n    }\n"): (typeof documents)["\n    query SalesOrderDetails($id: Int!) {\n        project(id: $id) {\n            id\n            name\n            status\n            saleOrder {\n                id\n                code\n                estimate {\n                    id\n                    discount\n                    # subtotal = price - taxesPrice - installationService.price - deliveryService.price\n                    price\n                    markup\n                    taxesPrice\n                    installationService {\n                        id\n                        price\n                    }\n                    deliveryService {\n                        id\n                        price\n                    }\n                    discount\n                    profitMargin\n                    profitMarginPercentage\n                    allItems {\n                        id\n                        name\n                        price\n                        discount\n                    }\n                }\n            }\n            customer {\n                id\n                name\n            }\n            projectOwner {\n                id\n                name\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query SalesOrders($filters: ProjectsFilters!) {\n        projects(filters: $filters) {\n            hasMore\n            projects {\n                id\n                name\n                saleOrder {\n                    id\n                    estimate {\n                        id\n                        price\n                        markup\n                        discount\n                        profitMarginPercentage\n                    }\n                }\n                customer {\n                    id\n                    name\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query SalesOrders($filters: ProjectsFilters!) {\n        projects(filters: $filters) {\n            hasMore\n            projects {\n                id\n                name\n                saleOrder {\n                    id\n                    estimate {\n                        id\n                        price\n                        markup\n                        discount\n                        profitMarginPercentage\n                    }\n                }\n                customer {\n                    id\n                    name\n                }\n            }\n        }\n    }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;